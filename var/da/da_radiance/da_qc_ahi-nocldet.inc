subroutine da_qc_ahi (it, i, nchan, ob, iv)

   !---------------------------------------------------------------------------
   ! Purpose: perform quality control for ahi  data.
   !  Method: Assume cloud flag coming from GEOCAT processing
   ! To be developed: built in cloud_detection method 
   !---------------------------------------------------------------------------

   implicit none

   integer, intent(in)             :: it         ! outer loop count
   integer, intent(in)             :: i          ! sensor index.
   integer, intent(in)             :: nchan      ! number of channel
   type (y_type),  intent(in)      :: ob         ! Observation structure.
   type (iv_type), intent(inout)   :: iv         ! O-B structure.

   ! local variables
   logical   :: lmix, cloud_detection 
   integer   :: n,k,isflg,ios,fgat_rad_unit
   integer   :: ngood(nchan),nrej(nchan),nrej_omb_abs(nchan), &
                nrej_omb_std(nchan),nrej_eccloud(nchan), &
                nrej_clw(nchan),num_proc_domain, &
				nrej_mixsurface,nrej_land

   real      :: inv_grosscheck				

   character(len=30)  :: filename
   real, pointer      :: tb_ob(:,:), tb_xb(:,:), tb_inv(:,:), tb_xb_clr(:,:), ca_mean(:,:)   
   
   if (trace_use) call da_trace_entry("da_qc_ahi")

   ngood(:)        = 0
   nrej(:)         = 0
   nrej_omb_abs(:) = 0
   nrej_omb_std(:) = 0
   nrej_eccloud(:) = 0 
   nrej_clw(:)     = 0
   nrej_mixsurface = 0
   nrej_land       = 0
   num_proc_domain = 0

   tb_ob => ob%instid(i)%tb
   tb_xb => iv%instid(i)%tb_xb
   tb_inv => iv%instid(i)%tb_inv
   
   do n= iv%instid(i)%info%n1,iv%instid(i)%info%n2
      if (iv%instid(i)%info%proc_domain(1,n)) &
            num_proc_domain = num_proc_domain + 1

      !  0.0  initialise QC by flags assuming good obs
      !-----------------------------------------------------------------
      iv%instid(i)%tb_qc(:,n) = qc_good	

      !  1.0  reject all channels over mixture surface type
      !------------------------------------------------------	  
      isflg = iv%instid(i)%isflg(n)
      lmix  = (isflg==4) .or. (isflg==5) .or. (isflg==6) .or. (isflg==7)
      if (lmix) then
         iv%instid(i)%tb_qc(:,n)  =  qc_bad
         if (iv%instid(i)%info%proc_domain(1,n)) &
            nrej_mixsurface = nrej_mixsurface + 1
      end if

      if ( isflg > 0 ) then         
         do k = 1, nchan                
           !if ( k /= 2 .and. k /= 3 .and. k /= 4 ) then
            if (only_sea_rad) then
               iv%instid(i)%tb_qc(k,n)  = qc_bad
                              nrej_land = nrej_land + 1
            end if
           !end if
         end do         
      end if
	  
      !  3.0 check iuse
      !-----------------------------------------------------------------
      do k = 1, nchan
         if (satinfo(i)%iuse(k) .eq. -1) &
            iv%instid(i)%tb_qc(k,n)  = qc_bad
      end do

      !  4.0 check cloud
      !-----------------------------------------------------------------
      if ((.not. crtm_cloud ) .and. (.not. rttov_cloud)) then

         do k = 1, nchan
		 
         if (iv%instid(i)%clwp(n) >= 0.2) then
            iv%instid(i)%tb_qc(k,n) = qc_bad
            if (iv%instid(i)%info%proc_domain(1,n)) &
               nrej_clw(k) = nrej_clw(k) + 1
         end if

         cloud_detection=.false.	
         if (cloud_detection) then
            if (iv%instid(i)%landsea_mask(n) == 0 ) then
               if (iv%instid(i)%tb_xb(3,n)-ob%instid(i)%tb(3,n)>3.5) then
                  iv%instid(i)%tb_qc(k,n) = qc_bad
                  if (iv%instid(i)%info%proc_domain(1,n)) &
                     nrej_eccloud(k) = nrej_eccloud(k) + 1
               end if
            else
               if (iv%instid(i)%tb_xb(3,n)-ob%instid(i)%tb(3,n)>2.5) then
                  iv%instid(i)%tb_qc(k,n) = qc_bad
                  if (iv%instid(i)%info%proc_domain(1,n)) &
                     nrej_eccloud(k) = nrej_eccloud(k) + 1
               end if
            end if
         else
            if (iv%instid(i)%cloudflag(n) < 3) then ! only use confident clear pixels
                iv%instid(i)%tb_qc(:,n) = qc_bad
                if (iv%instid(i)%info%proc_domain(1,n)) &
                    nrej_eccloud(k) = nrej_eccloud(k) + 1
            end if
         end if
		 
         end do
      end if

      ! assigning obs errors
      if ((.not. crtm_cloud ).or.(.not. rttov_cloud)) then
         do k = 1, nchan
            if (use_error_factor_rad) then
               iv%instid(i)%tb_error(k,n) = &
                   satinfo(i)%error_std(k)*satinfo(i)%error_factor(k)
            else
               iv%instid(i)%tb_error(k,n) = satinfo(i)%error_std(k)
            end if
         end do ! nchan

      else !crtm_cloud
	     tb_xb_clr => iv%instid(i)%tb_xb_clr
         ! calculate ca_mean
         ca_mean => iv%instid(i)%ca_mean
         ca_mean = missing_r
         do k = 1, nchan
            if ( .true. &
                  .and. tb_inv( k, n ) .gt. missing_r &
                  .and. tb_ob(  k, n ) .gt. 0. &
                  .and. tb_xb(  k, n ) .gt. 0.)then

! using ob without VarBC 
! -------------------------------
!               ca_mean(k,n) = 0.5 * ( abs( tb_xb_clr(k,n) - tb_xb(k,n) ) + &
!                                      abs(  tb_xb_clr(k,n) - tb_ob(k,n) ) )

! above using ob with VarBC 
! -------------------------------
               ca_mean(k,n) = 0.5 * ( abs( tb_xb_clr(k,n) - tb_xb(k,n) ) + &
                                      abs( tb_xb_clr(k,n) - (tb_inv(k,n) + tb_xb(k,n)) ) )
            end if
         end do

         ! symmetric error model, Okamoto et al. (2014; 2017)
         do k = 1, nchan
            if ( ca_mean(k,n).lt. satinfo(i)%camin(k) .and. ca_mean(k,n).gt.missing_r ) then
               iv%instid(i)%tb_error(k,n) = satinfo(i)%error_std(k)
            else if ( ca_mean(k,n) .lt. satinfo(i)%camax(k) ) then
               iv%instid(i)%tb_error(k,n) = satinfo(i)%error_std(k) + &
                  ( satinfo(i)%error_cld(k) - satinfo(i)%error_std(k) ) * &
                  ( ca_mean(k,n) - camin ) / ( satinfo(i)%camax(k)-satinfo(i)%camin(k))
            else
               iv%instid(i)%tb_error(k,n) = satinfo(i)%error_cld(k)
            end if
         end do ! nchan
      end if

      !  5.0 check innovation
      !-----------------------------------------------------------------
      if (.not. crtm_cloud ) then
         ! absolute departure check
         do k = 1, nchan
            inv_grosscheck = 8.0
            if (use_satcv(2)) inv_grosscheck = 100.0
            if (abs(iv%instid(i)%tb_inv(k,n)) > inv_grosscheck) then
                iv%instid(i)%tb_qc(k,n)  = qc_bad
                if (iv%instid(i)%info%proc_domain(1,n)) &
                        nrej_omb_abs(k) = nrej_omb_abs(k) + 1
            end if			
         end do ! nchan
      end if

      do k = 1, nchan
         ! relative departure check
           if (abs(iv%instid(i)%tb_inv(k,n)) > 3.0*iv%instid(i)%tb_error(k,n)) then
               iv%instid(i)%tb_qc(k,n)  = qc_bad
               if (iv%instid(i)%info%proc_domain(1,n)) &
                   nrej_omb_std(k) = nrej_omb_std(k) + 1
           end if

         ! final QC decsion
         if (iv%instid(i)%tb_qc(k,n) == qc_bad) then
            iv%instid(i)%tb_error(k,n) = 500.0
            if (iv%instid(i)%info%proc_domain(1,n)) &
                  nrej(k) = nrej(k) + 1
         else
            if (iv%instid(i)%info%proc_domain(1,n)) &
                  ngood(k) = ngood(k) + 1
         end if
      end do      ! nchan

   end do ! end loop pixel
 
   ! Do inter-processor communication to gather statistics.
   call da_proc_sum_int  (num_proc_domain)
   call da_proc_sum_int  (nrej_mixsurface)
   call da_proc_sum_int  (nrej_land)
   call da_proc_sum_ints (nrej_eccloud)
   call da_proc_sum_ints (nrej_omb_abs)
   call da_proc_sum_ints (nrej_omb_std)
   call da_proc_sum_ints (nrej_clw)
   call da_proc_sum_ints (nrej)
   call da_proc_sum_ints (ngood)

   if (rootproc) then
      if (num_fgat_time > 1) then
         write(filename,'(i2.2,a,i2.2)') it,'_qcstat_'//trim(iv%instid(i)%rttovid_string)//'_',iv%time
      else
         write(filename,'(i2.2,a)') it,'_qcstat_'//trim(iv%instid(i)%rttovid_string)
      end if

      call da_get_unit(fgat_rad_unit)
      open(fgat_rad_unit,file=trim(filename),form='formatted',iostat=ios)
      if (ios /= 0) then
         write(unit=message(1),fmt='(A,A)') 'error opening the output file ', filename
         call da_error(__FILE__,__LINE__,message(1:1))
      end if

      write(fgat_rad_unit, fmt='(/a/)') ' Quality Control Statistics for '//iv%instid(i)%rttovid_string
      if(num_proc_domain > 0) write(fgat_rad_unit,'(a20,i7)') ' num_proc_domain  = ', num_proc_domain
      write(fgat_rad_unit,'(a20,i7)') ' nrej_mixsurface  = ', nrej_mixsurface
	  write(fgat_rad_unit,'(a20,i7)') ' nrej_land  = ', nrej_land
      write(fgat_rad_unit,'(a20)')    ' nrej_eccloud(:)  = '
	  write(fgat_rad_unit,'(10i7)')     nrej_eccloud(:)	  
      write(fgat_rad_unit,'(a20)')    ' nrej_clw(:)  = '
	  write(fgat_rad_unit,'(10i7)')     nrej_clw(:)	  	  
      write(fgat_rad_unit,'(a20)')    ' nrej_omb_abs(:)  = '
      write(fgat_rad_unit,'(10i7)')     nrej_omb_abs(:)
      write(fgat_rad_unit,'(a20)')    ' nrej_omb_std(:)  = '
      write(fgat_rad_unit,'(10i7)')     nrej_omb_std(:)
      write(fgat_rad_unit,'(a20)')    ' nrej(:)          = '
      write(fgat_rad_unit,'(10i7)')     nrej(:)
      write(fgat_rad_unit,'(a20)')    ' ngood(:)         = '
      write(fgat_rad_unit,'(10i7)')     ngood(:)

      close(fgat_rad_unit)
      call da_free_unit(fgat_rad_unit)
   end if
   if (trace_use) call da_trace_exit("da_qc_ahi")

end subroutine da_qc_ahi
